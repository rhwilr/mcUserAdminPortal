var app = angular.module('mcUAP', [
    'ngResource',
    'ui.bootstrap',
    'ui.router.tabs',
    'ui.router'
    ])


    .config(["$interpolateProvider", function ($interpolateProvider) {
        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');
    }]);
app.factory('ServersApi', ["$resource", function($resource){
    return $resource('/api/v1/server/:id', null,
        {
            'update': { method:'PUT' }
        });
    }]);
app.controller("AdminCtrl", ["$scope", function($scope) {

    $scope.tabData   = [
        {
            heading: 'Servers',
            route:   'servers'
        },
        {
            heading: 'Subscriptions',
            route:   'subscriptions'
        },
        {
            heading: 'Users',
            route:   'users'
        },
        {
            heading: 'Roles',
            route:   'roles'
        }
    ];


}]).config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    //
    // For any unmatched url, redirect to /state1
    $urlRouterProvider.otherwise("/servers");
    //
    // Now set up the states
    $stateProvider.state('servers', {
        url: '/servers',
        templateUrl: 'partials/admin/servers.html'
    }).state('subscriptions', {
        url: '/subscriptions',
        templateUrl: 'partials/admin/subscriptions.html'
    }).state('users', {
        url: '/users',
        templateUrl: 'partials/admin/users.html'
    }).state('roles', {
        url: '/roles',
        templateUrl: 'partials/admin/roles.html'
    });

}]);
app.controller("ServerIndexCtrl", ["$scope", "$modal", "$filter", "ServersApi", function($scope, $modal, $filter, ServersApi) {
    ServersApi.get(function(data) {
        $scope.servers = data.data;
    });

    $scope.open = function (serverEditID) {

        $scope.EditObject = {};
        if(serverEditID){
            $scope.EditObject = $filter('filter')($scope.servers, function (d) {return d.id === serverEditID;})[0];
            $scope.EditObject.editMode=true;
        }



        var modalInstance = $modal.open({
            templateUrl: 'AddServerModal.html',
            controller: 'ModalInstanceCtrl',
            resolve: {
                data: function () {
                    return  $scope.EditObject;
                }
            }
        });

        modalInstance.result.then(function (data) {
            if(data.editMode){
                ServersApi.update({ id:data.id }  , data);
            } else {
                ServersApi.save( data);
                $scope.servers.push(data);
            }
        }, function () {

        });
    };

}]);
app.controller('ModalInstanceCtrl', ["$scope", "$modalInstance", "data", function ($scope, $modalInstance, data) {

    $scope.data = data;

    $scope.ok = function () {
        $modalInstance.close($scope.data);
    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };
}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIlNlcnZpY2VzL1NlcnZlclNlcnZpY2UuanMiLCJDb250cm9sbGVycy9BZG1pbmlzdHJhdGlvbi9BZG1pbmlzdHJhdGlvbkNvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9BZG1pbmlzdHJhdGlvbi9TZXJ2ZXJDb250cm9sbGVyLmpzIiwiQ29udHJvbGxlcnMvQ29tbW9uL01vZGFsc0NvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDWEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDTEE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUMxQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ3JDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbWNVQVAnLCBbXHJcbiAgICAnbmdSZXNvdXJjZScsXHJcbiAgICAndWkuYm9vdHN0cmFwJyxcclxuICAgICd1aS5yb3V0ZXIudGFicycsXHJcbiAgICAndWkucm91dGVyJ1xyXG4gICAgXSlcclxuXHJcblxyXG4gICAgLmNvbmZpZyhmdW5jdGlvbiAoJGludGVycG9sYXRlUHJvdmlkZXIpIHtcclxuICAgICAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbCgnW1snKTtcclxuICAgICAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5lbmRTeW1ib2woJ11dJyk7XHJcbiAgICB9KTsiLCJhcHAuZmFjdG9yeSgnU2VydmVyc0FwaScsIGZ1bmN0aW9uKCRyZXNvdXJjZSl7XHJcbiAgICByZXR1cm4gJHJlc291cmNlKCcvYXBpL3YxL3NlcnZlci86aWQnLCBudWxsLFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgJ3VwZGF0ZSc6IHsgbWV0aG9kOidQVVQnIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pOyIsImFwcC5jb250cm9sbGVyKFwiQWRtaW5DdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSkge1xyXG5cclxuICAgICRzY29wZS50YWJEYXRhICAgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBoZWFkaW5nOiAnU2VydmVycycsXHJcbiAgICAgICAgICAgIHJvdXRlOiAgICdzZXJ2ZXJzJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBoZWFkaW5nOiAnU3Vic2NyaXB0aW9ucycsXHJcbiAgICAgICAgICAgIHJvdXRlOiAgICdzdWJzY3JpcHRpb25zJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBoZWFkaW5nOiAnVXNlcnMnLFxyXG4gICAgICAgICAgICByb3V0ZTogICAndXNlcnMnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGhlYWRpbmc6ICdSb2xlcycsXHJcbiAgICAgICAgICAgIHJvdXRlOiAgICdyb2xlcydcclxuICAgICAgICB9XHJcbiAgICBdO1xyXG5cclxuXHJcbn0pLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XHJcbiAgICAvL1xyXG4gICAgLy8gRm9yIGFueSB1bm1hdGNoZWQgdXJsLCByZWRpcmVjdCB0byAvc3RhdGUxXHJcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL3NlcnZlcnNcIik7XHJcbiAgICAvL1xyXG4gICAgLy8gTm93IHNldCB1cCB0aGUgc3RhdGVzXHJcbiAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnc2VydmVycycsIHtcclxuICAgICAgICB1cmw6ICcvc2VydmVycycsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9hZG1pbi9zZXJ2ZXJzLmh0bWwnXHJcbiAgICB9KS5zdGF0ZSgnc3Vic2NyaXB0aW9ucycsIHtcclxuICAgICAgICB1cmw6ICcvc3Vic2NyaXB0aW9ucycsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9hZG1pbi9zdWJzY3JpcHRpb25zLmh0bWwnXHJcbiAgICB9KS5zdGF0ZSgndXNlcnMnLCB7XHJcbiAgICAgICAgdXJsOiAnL3VzZXJzJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2FkbWluL3VzZXJzLmh0bWwnXHJcbiAgICB9KS5zdGF0ZSgncm9sZXMnLCB7XHJcbiAgICAgICAgdXJsOiAnL3JvbGVzJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2FkbWluL3JvbGVzLmh0bWwnXHJcbiAgICB9KTtcclxuXHJcbn0pOyIsImFwcC5jb250cm9sbGVyKFwiU2VydmVySW5kZXhDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSwgJG1vZGFsLCAkZmlsdGVyLCBTZXJ2ZXJzQXBpKSB7XHJcbiAgICBTZXJ2ZXJzQXBpLmdldChmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgJHNjb3BlLnNlcnZlcnMgPSBkYXRhLmRhdGE7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uIChzZXJ2ZXJFZGl0SUQpIHtcclxuXHJcbiAgICAgICAgJHNjb3BlLkVkaXRPYmplY3QgPSB7fTtcclxuICAgICAgICBpZihzZXJ2ZXJFZGl0SUQpe1xyXG4gICAgICAgICAgICAkc2NvcGUuRWRpdE9iamVjdCA9ICRmaWx0ZXIoJ2ZpbHRlcicpKCRzY29wZS5zZXJ2ZXJzLCBmdW5jdGlvbiAoZCkge3JldHVybiBkLmlkID09PSBzZXJ2ZXJFZGl0SUQ7fSlbMF07XHJcbiAgICAgICAgICAgICRzY29wZS5FZGl0T2JqZWN0LmVkaXRNb2RlPXRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuXHJcblxyXG4gICAgICAgIHZhciBtb2RhbEluc3RhbmNlID0gJG1vZGFsLm9wZW4oe1xyXG4gICAgICAgICAgICB0ZW1wbGF0ZVVybDogJ0FkZFNlcnZlck1vZGFsLmh0bWwnLFxyXG4gICAgICAgICAgICBjb250cm9sbGVyOiAnTW9kYWxJbnN0YW5jZUN0cmwnLFxyXG4gICAgICAgICAgICByZXNvbHZlOiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICAkc2NvcGUuRWRpdE9iamVjdDtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBtb2RhbEluc3RhbmNlLnJlc3VsdC50aGVuKGZ1bmN0aW9uIChkYXRhKSB7XHJcbiAgICAgICAgICAgIGlmKGRhdGEuZWRpdE1vZGUpe1xyXG4gICAgICAgICAgICAgICAgU2VydmVyc0FwaS51cGRhdGUoeyBpZDpkYXRhLmlkIH0gICwgZGF0YSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBTZXJ2ZXJzQXBpLnNhdmUoIGRhdGEpO1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLnNlcnZlcnMucHVzaChkYXRhKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0sIGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxufSk7IiwiYXBwLmNvbnRyb2xsZXIoJ01vZGFsSW5zdGFuY2VDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UsIGRhdGEpIHtcclxuXHJcbiAgICAkc2NvcGUuZGF0YSA9IGRhdGE7XHJcblxyXG4gICAgJHNjb3BlLm9rID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCRzY29wZS5kYXRhKTtcclxuICAgIH07XHJcblxyXG4gICAgJHNjb3BlLmNhbmNlbCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkbW9kYWxJbnN0YW5jZS5kaXNtaXNzKCdjYW5jZWwnKTtcclxuICAgIH07XHJcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==