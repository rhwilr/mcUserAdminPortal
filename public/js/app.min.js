var app = angular.module('mcUAP', [
    'ngResource',
    'ui.bootstrap',
    'ui.router.tabs',
    'ui.router',
    'cgBusy'
    ])


    .config(["$interpolateProvider", function ($interpolateProvider) {
        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');
    }])
    .value('cgBusyDefaults',{
        message:'Loading Data',
        backdrop: false,
        templateUrl: '/partials/common/angular-busy.html',
        delay: 0,
        minDuration: 100,
        wrapperClass: 'my-class my-class2'
    });
app.factory('ServersApi', ["$resource", function($resource){
    return $resource('/api/v1/server/:id', {id:'@id'},
        {
            'update': { method:'PUT' }
        });
    }]);
app.controller("AdminCtrl", ["$scope", function($scope) {

    $scope.tabData   = [
        {
            heading: 'Servers',
            route:   'servers'
        },
        {
            heading: 'Subscriptions',
            route:   'subscriptions'
        },
        {
            heading: 'Users',
            route:   'users'
        },
        {
            heading: 'Roles',
            route:   'roles'
        }
    ];


}]).config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    //
    // For any unmatched url, redirect to /state1
    $urlRouterProvider.otherwise("/servers");
    //
    // Now set up the states
    $stateProvider.state('servers', {
        url: '/servers',
        templateUrl: 'partials/admin/servers.html'
    }).state('subscriptions', {
        url: '/subscriptions',
        templateUrl: 'partials/admin/subscriptions.html'
    }).state('users', {
        url: '/users',
        templateUrl: 'partials/admin/users.html'
    }).state('roles', {
        url: '/roles',
        templateUrl: 'partials/admin/roles.html'
    });

}]);
app.controller("ServerIndexCtrl", ["$scope", "$modal", "$filter", "ServersApi", function($scope, $modal, $filter, ServersApi) {
    $scope.myPromise = ServersApi.get(function(data) {
        $scope.servers = data.data;
    });

    $scope.open = function (serverEditID) {

        var modalInstance = $modal.open({
            templateUrl: 'AddServerModal.html',
            controller: 'ModalInstanceCtrl',
            resolve: {
                ResourcesApi: function () {
                    return  ServersApi;
                },
                recordID: function () {
                    return  serverEditID;
                }
            }
        });

        modalInstance.result.then(function (data) {
            if(data.editMode){
                ServersApi.update({ id:data.id }  , data);
            } else {
                ServersApi.save( data);
                $scope.servers.push(data);
            }
        }, function () {

        });
    };

}]);
app.controller('ModalInstanceCtrl', ["$scope", "$modalInstance", "ResourcesApi", "recordID", function ($scope, $modalInstance, ResourcesApi, recordID) {


    $scope.myPromise =  ResourcesApi.get({id:recordID}, function(data) {
        $scope.resource = data.data;
    });

    $scope.ok = function () {
        $modalInstance.close($scope.resource);
    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };
}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIlNlcnZpY2VzL1NlcnZlclNlcnZpY2UuanMiLCJDb250cm9sbGVycy9BZG1pbmlzdHJhdGlvbi9BZG1pbmlzdHJhdGlvbkNvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9BZG1pbmlzdHJhdGlvbi9TZXJ2ZXJDb250cm9sbGVyLmpzIiwiQ29udHJvbGxlcnMvQ29tbW9uL01vZGFsc0NvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDcEJBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ0xBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FDMUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQ2hDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiYXBwLm1pbi5qcyIsInNvdXJjZXNDb250ZW50IjpbInZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgnbWNVQVAnLCBbXHJcbiAgICAnbmdSZXNvdXJjZScsXHJcbiAgICAndWkuYm9vdHN0cmFwJyxcclxuICAgICd1aS5yb3V0ZXIudGFicycsXHJcbiAgICAndWkucm91dGVyJyxcclxuICAgICdjZ0J1c3knXHJcbiAgICBdKVxyXG5cclxuXHJcbiAgICAuY29uZmlnKGZ1bmN0aW9uICgkaW50ZXJwb2xhdGVQcm92aWRlcikge1xyXG4gICAgICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLnN0YXJ0U3ltYm9sKCdbWycpO1xyXG4gICAgICAgICRpbnRlcnBvbGF0ZVByb3ZpZGVyLmVuZFN5bWJvbCgnXV0nKTtcclxuICAgIH0pXHJcbiAgICAudmFsdWUoJ2NnQnVzeURlZmF1bHRzJyx7XHJcbiAgICAgICAgbWVzc2FnZTonTG9hZGluZyBEYXRhJyxcclxuICAgICAgICBiYWNrZHJvcDogZmFsc2UsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICcvcGFydGlhbHMvY29tbW9uL2FuZ3VsYXItYnVzeS5odG1sJyxcclxuICAgICAgICBkZWxheTogMCxcclxuICAgICAgICBtaW5EdXJhdGlvbjogMTAwLFxyXG4gICAgICAgIHdyYXBwZXJDbGFzczogJ215LWNsYXNzIG15LWNsYXNzMidcclxuICAgIH0pOyIsImFwcC5mYWN0b3J5KCdTZXJ2ZXJzQXBpJywgZnVuY3Rpb24oJHJlc291cmNlKXtcclxuICAgIHJldHVybiAkcmVzb3VyY2UoJy9hcGkvdjEvc2VydmVyLzppZCcsIHtpZDonQGlkJ30sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICAndXBkYXRlJzogeyBtZXRob2Q6J1BVVCcgfVxyXG4gICAgICAgIH0pO1xyXG4gICAgfSk7IiwiYXBwLmNvbnRyb2xsZXIoXCJBZG1pbkN0cmxcIiwgZnVuY3Rpb24oJHNjb3BlKSB7XHJcblxyXG4gICAgJHNjb3BlLnRhYkRhdGEgICA9IFtcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGhlYWRpbmc6ICdTZXJ2ZXJzJyxcclxuICAgICAgICAgICAgcm91dGU6ICAgJ3NlcnZlcnMnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGhlYWRpbmc6ICdTdWJzY3JpcHRpb25zJyxcclxuICAgICAgICAgICAgcm91dGU6ICAgJ3N1YnNjcmlwdGlvbnMnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGhlYWRpbmc6ICdVc2VycycsXHJcbiAgICAgICAgICAgIHJvdXRlOiAgICd1c2VycydcclxuICAgICAgICB9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgaGVhZGluZzogJ1JvbGVzJyxcclxuICAgICAgICAgICAgcm91dGU6ICAgJ3JvbGVzJ1xyXG4gICAgICAgIH1cclxuICAgIF07XHJcblxyXG5cclxufSkuY29uZmlnKGZ1bmN0aW9uKCRzdGF0ZVByb3ZpZGVyLCAkdXJsUm91dGVyUHJvdmlkZXIpIHtcclxuICAgIC8vXHJcbiAgICAvLyBGb3IgYW55IHVubWF0Y2hlZCB1cmwsIHJlZGlyZWN0IHRvIC9zdGF0ZTFcclxuICAgICR1cmxSb3V0ZXJQcm92aWRlci5vdGhlcndpc2UoXCIvc2VydmVyc1wiKTtcclxuICAgIC8vXHJcbiAgICAvLyBOb3cgc2V0IHVwIHRoZSBzdGF0ZXNcclxuICAgICRzdGF0ZVByb3ZpZGVyLnN0YXRlKCdzZXJ2ZXJzJywge1xyXG4gICAgICAgIHVybDogJy9zZXJ2ZXJzJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2FkbWluL3NlcnZlcnMuaHRtbCdcclxuICAgIH0pLnN0YXRlKCdzdWJzY3JpcHRpb25zJywge1xyXG4gICAgICAgIHVybDogJy9zdWJzY3JpcHRpb25zJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2FkbWluL3N1YnNjcmlwdGlvbnMuaHRtbCdcclxuICAgIH0pLnN0YXRlKCd1c2VycycsIHtcclxuICAgICAgICB1cmw6ICcvdXNlcnMnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvYWRtaW4vdXNlcnMuaHRtbCdcclxuICAgIH0pLnN0YXRlKCdyb2xlcycsIHtcclxuICAgICAgICB1cmw6ICcvcm9sZXMnLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAncGFydGlhbHMvYWRtaW4vcm9sZXMuaHRtbCdcclxuICAgIH0pO1xyXG5cclxufSk7IiwiYXBwLmNvbnRyb2xsZXIoXCJTZXJ2ZXJJbmRleEN0cmxcIiwgZnVuY3Rpb24oJHNjb3BlLCAkbW9kYWwsICRmaWx0ZXIsIFNlcnZlcnNBcGkpIHtcclxuICAgICRzY29wZS5teVByb21pc2UgPSBTZXJ2ZXJzQXBpLmdldChmdW5jdGlvbihkYXRhKSB7XHJcbiAgICAgICAgJHNjb3BlLnNlcnZlcnMgPSBkYXRhLmRhdGE7XHJcbiAgICB9KTtcclxuXHJcbiAgICAkc2NvcGUub3BlbiA9IGZ1bmN0aW9uIChzZXJ2ZXJFZGl0SUQpIHtcclxuXHJcbiAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnQWRkU2VydmVyTW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNb2RhbEluc3RhbmNlQ3RybCcsXHJcbiAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgIFJlc291cmNlc0FwaTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAgU2VydmVyc0FwaTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZWNvcmRJRDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAgc2VydmVyRWRpdElEO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgaWYoZGF0YS5lZGl0TW9kZSl7XHJcbiAgICAgICAgICAgICAgICBTZXJ2ZXJzQXBpLnVwZGF0ZSh7IGlkOmRhdGEuaWQgfSAgLCBkYXRhKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIFNlcnZlcnNBcGkuc2F2ZSggZGF0YSk7XHJcbiAgICAgICAgICAgICAgICAkc2NvcGUuc2VydmVycy5wdXNoKGRhdGEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSwgZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG59KTsiLCJhcHAuY29udHJvbGxlcignTW9kYWxJbnN0YW5jZUN0cmwnLCBmdW5jdGlvbiAoJHNjb3BlLCAkbW9kYWxJbnN0YW5jZSwgUmVzb3VyY2VzQXBpLCByZWNvcmRJRCkge1xyXG5cclxuXHJcbiAgICAkc2NvcGUubXlQcm9taXNlID0gIFJlc291cmNlc0FwaS5nZXQoe2lkOnJlY29yZElEfSwgZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICRzY29wZS5yZXNvdXJjZSA9IGRhdGEuZGF0YTtcclxuICAgIH0pO1xyXG5cclxuICAgICRzY29wZS5vayA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgkc2NvcGUucmVzb3VyY2UpO1xyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgfTtcclxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9