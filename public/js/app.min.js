var app = angular.module('mcUAP', [
    'ngResource',
    'ui.bootstrap',
    'ui.router.tabs',
    'ui.router',
    'cgBusy'
    ])


    .config(["$interpolateProvider", function ($interpolateProvider) {
        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');
    }])
    .value('cgBusyDefaults',{
        message:'Loading Data',
        backdrop: false,
        templateUrl: '/partials/common/angular-busy.html',
        delay: 0,
        minDuration: 100,
        wrapperClass: 'my-class my-class2'
    });
app.factory('ServersApi', ["$resource", function($resource){
    return $resource('/api/v1/server/:id', {id:'@id'},
        {
            'update': { method:'PUT' }
        });
    }]);
app.controller("AdminCtrl", ["$scope", function($scope) {

    $scope.tabData   = [
        {
            heading: 'Servers',
            route:   'servers'
        },
        {
            heading: 'Subscriptions',
            route:   'subscriptions'
        },
        {
            heading: 'Users',
            route:   'users'
        },
        {
            heading: 'Roles',
            route:   'roles'
        }
    ];


}]).config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    //
    // For any unmatched url, redirect to /state1
    $urlRouterProvider.otherwise("/servers");
    //
    // Now set up the states
    $stateProvider.state('servers', {
        url: '/servers',
        templateUrl: 'partials/admin/servers.html'
    }).state('subscriptions', {
        url: '/subscriptions',
        templateUrl: 'partials/admin/subscriptions.html'
    }).state('users', {
        url: '/users',
        templateUrl: 'partials/admin/users.html'
    }).state('roles', {
        url: '/roles',
        templateUrl: 'partials/admin/roles.html'
    });

}]);
app.controller("ServerIndexCtrl", ["$scope", "$modal", "$filter", "ServersApi", function($scope, $modal, $filter, ServersApi) {


    var refreshData = function () {
        $scope.myPromise = ServersApi.get(function(data) {
            $scope.servers = data.data;
            $scope.showTableContent = true;
        });
    };
    refreshData();

    $scope.open = function (serverEditID) {
        var modalInstance = $modal.open({
            templateUrl: 'AddServerModal.html',
            controller: 'ModalInstanceCtrl',
            resolve: {
                ResourcesApi: function () {
                    return  ServersApi;
                },
                recordID: function () {
                    return  serverEditID;
                }
            }
        });

        modalInstance.result.then(function (data) {
            refreshData();
        }, function () {
        });
    };

}]);
app.controller('ModalInstanceCtrl', ["$scope", "$modalInstance", "ResourcesApi", "recordID", function ($scope, $modalInstance, ResourcesApi, recordID) {

    if (recordID) {
        $scope.myPromise =  ResourcesApi.get({id:recordID}, function(data) {
            $scope.resource = data.data;
            $scope.showModalContent = true;
        });
    }
    else {
        $scope.showModalContent = true;
    }

    $scope.ok = function () {
        if(recordID){
            ResourcesApi.update({ id:$scope.resource.id }, $scope.resource, function(res) {
                $modalInstance.close($scope.resource);
            }, function(res) {
                $scope.errorResponse = res.data.error.message;
            });
        } else {
            console.log("2");
            ResourcesApi.save( $scope.resource, function(res) {
                $modalInstance.close($scope.resource);
            }, function(res) {
                $scope.errorResponse = res.data.error.message;
            });
        }

    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };
}]);
app.controller('NavbarInstanceCtrl', ["$scope", function ($scope) {
}]);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFwcC5qcyIsIlNlcnZpY2VzL1NlcnZlclNlcnZpY2UuanMiLCJDb250cm9sbGVycy9BZG1pbmlzdHJhdGlvbi9BZG1pbmlzdHJhdGlvbkNvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9BZG1pbmlzdHJhdGlvbi9TZXJ2ZXJDb250cm9sbGVyLmpzIiwiQ29udHJvbGxlcnMvQ29tbW9uL01vZGFsc0NvbnRyb2xsZXIuanMiLCJDb250cm9sbGVycy9SZWdpb25zL05hdmJhckNvbnRyb2xsZXIuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsSUFBQSxNQUFBLFFBQUEsT0FBQSxTQUFBO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQTs7OztLQUlBLGdDQUFBLFVBQUEsc0JBQUE7UUFDQSxxQkFBQSxZQUFBO1FBQ0EscUJBQUEsVUFBQTs7S0FFQSxNQUFBLGlCQUFBO1FBQ0EsUUFBQTtRQUNBLFVBQUE7UUFDQSxhQUFBO1FBQ0EsT0FBQTtRQUNBLGFBQUE7UUFDQSxjQUFBOztBQ25CQSxJQUFBLFFBQUEsNEJBQUEsU0FBQSxVQUFBO0lBQ0EsT0FBQSxVQUFBLHNCQUFBLENBQUEsR0FBQTtRQUNBO1lBQ0EsVUFBQSxFQUFBLE9BQUE7OztBQ0hBLElBQUEsV0FBQSx3QkFBQSxTQUFBLFFBQUE7O0lBRUEsT0FBQSxZQUFBO1FBQ0E7WUFDQSxTQUFBO1lBQ0EsU0FBQTs7UUFFQTtZQUNBLFNBQUE7WUFDQSxTQUFBOztRQUVBO1lBQ0EsU0FBQTtZQUNBLFNBQUE7O1FBRUE7WUFDQSxTQUFBO1lBQ0EsU0FBQTs7Ozs7SUFLQSxnREFBQSxTQUFBLGdCQUFBLG9CQUFBOzs7SUFHQSxtQkFBQSxVQUFBOzs7SUFHQSxlQUFBLE1BQUEsV0FBQTtRQUNBLEtBQUE7UUFDQSxhQUFBO09BQ0EsTUFBQSxpQkFBQTtRQUNBLEtBQUE7UUFDQSxhQUFBO09BQ0EsTUFBQSxTQUFBO1FBQ0EsS0FBQTtRQUNBLGFBQUE7T0FDQSxNQUFBLFNBQUE7UUFDQSxLQUFBO1FBQ0EsYUFBQTs7OztBQ3ZDQSxJQUFBLFdBQUEsaUVBQUEsU0FBQSxRQUFBLFFBQUEsU0FBQSxZQUFBOzs7SUFHQSxJQUFBLGNBQUEsWUFBQTtRQUNBLE9BQUEsWUFBQSxXQUFBLElBQUEsU0FBQSxNQUFBO1lBQ0EsT0FBQSxVQUFBLEtBQUE7WUFDQSxPQUFBLG1CQUFBOzs7SUFHQTs7SUFFQSxPQUFBLE9BQUEsVUFBQSxjQUFBO1FBQ0EsSUFBQSxnQkFBQSxPQUFBLEtBQUE7WUFDQSxhQUFBO1lBQ0EsWUFBQTtZQUNBLFNBQUE7Z0JBQ0EsY0FBQSxZQUFBO29CQUNBLFFBQUE7O2dCQUVBLFVBQUEsWUFBQTtvQkFDQSxRQUFBOzs7OztRQUtBLGNBQUEsT0FBQSxLQUFBLFVBQUEsTUFBQTtZQUNBO1dBQ0EsWUFBQTs7Ozs7QUMzQkEsSUFBQSxXQUFBLDhFQUFBLFVBQUEsUUFBQSxnQkFBQSxjQUFBLFVBQUE7O0lBRUEsSUFBQSxVQUFBO1FBQ0EsT0FBQSxhQUFBLGFBQUEsSUFBQSxDQUFBLEdBQUEsV0FBQSxTQUFBLE1BQUE7WUFDQSxPQUFBLFdBQUEsS0FBQTtZQUNBLE9BQUEsbUJBQUE7OztTQUdBO1FBQ0EsT0FBQSxtQkFBQTs7O0lBR0EsT0FBQSxLQUFBLFlBQUE7UUFDQSxHQUFBLFNBQUE7WUFDQSxhQUFBLE9BQUEsRUFBQSxHQUFBLE9BQUEsU0FBQSxNQUFBLE9BQUEsVUFBQSxTQUFBLEtBQUE7Z0JBQ0EsZUFBQSxNQUFBLE9BQUE7ZUFDQSxTQUFBLEtBQUE7Z0JBQ0EsT0FBQSxnQkFBQSxJQUFBLEtBQUEsTUFBQTs7ZUFFQTtZQUNBLFFBQUEsSUFBQTtZQUNBLGFBQUEsTUFBQSxPQUFBLFVBQUEsU0FBQSxLQUFBO2dCQUNBLGVBQUEsTUFBQSxPQUFBO2VBQ0EsU0FBQSxLQUFBO2dCQUNBLE9BQUEsZ0JBQUEsSUFBQSxLQUFBLE1BQUE7Ozs7OztJQU1BLE9BQUEsU0FBQSxZQUFBO1FBQ0EsZUFBQSxRQUFBOzs7QUMvQkEsSUFBQSxXQUFBLGlDQUFBLFVBQUEsUUFBQTtlQUNBIiwiZmlsZSI6ImFwcC5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ21jVUFQJywgW1xyXG4gICAgJ25nUmVzb3VyY2UnLFxyXG4gICAgJ3VpLmJvb3RzdHJhcCcsXHJcbiAgICAndWkucm91dGVyLnRhYnMnLFxyXG4gICAgJ3VpLnJvdXRlcicsXHJcbiAgICAnY2dCdXN5J1xyXG4gICAgXSlcclxuXHJcblxyXG4gICAgLmNvbmZpZyhmdW5jdGlvbiAoJGludGVycG9sYXRlUHJvdmlkZXIpIHtcclxuICAgICAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5zdGFydFN5bWJvbCgnW1snKTtcclxuICAgICAgICAkaW50ZXJwb2xhdGVQcm92aWRlci5lbmRTeW1ib2woJ11dJyk7XHJcbiAgICB9KVxyXG4gICAgLnZhbHVlKCdjZ0J1c3lEZWZhdWx0cycse1xyXG4gICAgICAgIG1lc3NhZ2U6J0xvYWRpbmcgRGF0YScsXHJcbiAgICAgICAgYmFja2Ryb3A6IGZhbHNlLFxyXG4gICAgICAgIHRlbXBsYXRlVXJsOiAnL3BhcnRpYWxzL2NvbW1vbi9hbmd1bGFyLWJ1c3kuaHRtbCcsXHJcbiAgICAgICAgZGVsYXk6IDAsXHJcbiAgICAgICAgbWluRHVyYXRpb246IDEwMCxcclxuICAgICAgICB3cmFwcGVyQ2xhc3M6ICdteS1jbGFzcyBteS1jbGFzczInXHJcbiAgICB9KTsiLCJhcHAuZmFjdG9yeSgnU2VydmVyc0FwaScsIGZ1bmN0aW9uKCRyZXNvdXJjZSl7XHJcbiAgICByZXR1cm4gJHJlc291cmNlKCcvYXBpL3YxL3NlcnZlci86aWQnLCB7aWQ6J0BpZCd9LFxyXG4gICAgICAgIHtcclxuICAgICAgICAgICAgJ3VwZGF0ZSc6IHsgbWV0aG9kOidQVVQnIH1cclxuICAgICAgICB9KTtcclxuICAgIH0pOyIsImFwcC5jb250cm9sbGVyKFwiQWRtaW5DdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSkge1xyXG5cclxuICAgICRzY29wZS50YWJEYXRhICAgPSBbXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBoZWFkaW5nOiAnU2VydmVycycsXHJcbiAgICAgICAgICAgIHJvdXRlOiAgICdzZXJ2ZXJzJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBoZWFkaW5nOiAnU3Vic2NyaXB0aW9ucycsXHJcbiAgICAgICAgICAgIHJvdXRlOiAgICdzdWJzY3JpcHRpb25zJ1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAge1xyXG4gICAgICAgICAgICBoZWFkaW5nOiAnVXNlcnMnLFxyXG4gICAgICAgICAgICByb3V0ZTogICAndXNlcnMnXHJcbiAgICAgICAgfSxcclxuICAgICAgICB7XHJcbiAgICAgICAgICAgIGhlYWRpbmc6ICdSb2xlcycsXHJcbiAgICAgICAgICAgIHJvdXRlOiAgICdyb2xlcydcclxuICAgICAgICB9XHJcbiAgICBdO1xyXG5cclxuXHJcbn0pLmNvbmZpZyhmdW5jdGlvbigkc3RhdGVQcm92aWRlciwgJHVybFJvdXRlclByb3ZpZGVyKSB7XHJcbiAgICAvL1xyXG4gICAgLy8gRm9yIGFueSB1bm1hdGNoZWQgdXJsLCByZWRpcmVjdCB0byAvc3RhdGUxXHJcbiAgICAkdXJsUm91dGVyUHJvdmlkZXIub3RoZXJ3aXNlKFwiL3NlcnZlcnNcIik7XHJcbiAgICAvL1xyXG4gICAgLy8gTm93IHNldCB1cCB0aGUgc3RhdGVzXHJcbiAgICAkc3RhdGVQcm92aWRlci5zdGF0ZSgnc2VydmVycycsIHtcclxuICAgICAgICB1cmw6ICcvc2VydmVycycsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9hZG1pbi9zZXJ2ZXJzLmh0bWwnXHJcbiAgICB9KS5zdGF0ZSgnc3Vic2NyaXB0aW9ucycsIHtcclxuICAgICAgICB1cmw6ICcvc3Vic2NyaXB0aW9ucycsXHJcbiAgICAgICAgdGVtcGxhdGVVcmw6ICdwYXJ0aWFscy9hZG1pbi9zdWJzY3JpcHRpb25zLmh0bWwnXHJcbiAgICB9KS5zdGF0ZSgndXNlcnMnLCB7XHJcbiAgICAgICAgdXJsOiAnL3VzZXJzJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2FkbWluL3VzZXJzLmh0bWwnXHJcbiAgICB9KS5zdGF0ZSgncm9sZXMnLCB7XHJcbiAgICAgICAgdXJsOiAnL3JvbGVzJyxcclxuICAgICAgICB0ZW1wbGF0ZVVybDogJ3BhcnRpYWxzL2FkbWluL3JvbGVzLmh0bWwnXHJcbiAgICB9KTtcclxuXHJcbn0pOyIsImFwcC5jb250cm9sbGVyKFwiU2VydmVySW5kZXhDdHJsXCIsIGZ1bmN0aW9uKCRzY29wZSwgJG1vZGFsLCAkZmlsdGVyLCBTZXJ2ZXJzQXBpKSB7XHJcblxyXG5cclxuICAgIHZhciByZWZyZXNoRGF0YSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAkc2NvcGUubXlQcm9taXNlID0gU2VydmVyc0FwaS5nZXQoZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAkc2NvcGUuc2VydmVycyA9IGRhdGEuZGF0YTtcclxuICAgICAgICAgICAgJHNjb3BlLnNob3dUYWJsZUNvbnRlbnQgPSB0cnVlO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfTtcclxuICAgIHJlZnJlc2hEYXRhKCk7XHJcblxyXG4gICAgJHNjb3BlLm9wZW4gPSBmdW5jdGlvbiAoc2VydmVyRWRpdElEKSB7XHJcbiAgICAgICAgdmFyIG1vZGFsSW5zdGFuY2UgPSAkbW9kYWwub3Blbih7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsOiAnQWRkU2VydmVyTW9kYWwuaHRtbCcsXHJcbiAgICAgICAgICAgIGNvbnRyb2xsZXI6ICdNb2RhbEluc3RhbmNlQ3RybCcsXHJcbiAgICAgICAgICAgIHJlc29sdmU6IHtcclxuICAgICAgICAgICAgICAgIFJlc291cmNlc0FwaTogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAgU2VydmVyc0FwaTtcclxuICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICByZWNvcmRJRDogZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAgc2VydmVyRWRpdElEO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIG1vZGFsSW5zdGFuY2UucmVzdWx0LnRoZW4oZnVuY3Rpb24gKGRhdGEpIHtcclxuICAgICAgICAgICAgcmVmcmVzaERhdGEoKTtcclxuICAgICAgICB9LCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxufSk7IiwiYXBwLmNvbnRyb2xsZXIoJ01vZGFsSW5zdGFuY2VDdHJsJywgZnVuY3Rpb24gKCRzY29wZSwgJG1vZGFsSW5zdGFuY2UsIFJlc291cmNlc0FwaSwgcmVjb3JkSUQpIHtcclxuXHJcbiAgICBpZiAocmVjb3JkSUQpIHtcclxuICAgICAgICAkc2NvcGUubXlQcm9taXNlID0gIFJlc291cmNlc0FwaS5nZXQoe2lkOnJlY29yZElEfSwgZnVuY3Rpb24oZGF0YSkge1xyXG4gICAgICAgICAgICAkc2NvcGUucmVzb3VyY2UgPSBkYXRhLmRhdGE7XHJcbiAgICAgICAgICAgICRzY29wZS5zaG93TW9kYWxDb250ZW50ID0gdHJ1ZTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICAgICRzY29wZS5zaG93TW9kYWxDb250ZW50ID0gdHJ1ZTtcclxuICAgIH1cclxuXHJcbiAgICAkc2NvcGUub2sgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgaWYocmVjb3JkSUQpe1xyXG4gICAgICAgICAgICBSZXNvdXJjZXNBcGkudXBkYXRlKHsgaWQ6JHNjb3BlLnJlc291cmNlLmlkIH0sICRzY29wZS5yZXNvdXJjZSwgZnVuY3Rpb24ocmVzKSB7XHJcbiAgICAgICAgICAgICAgICAkbW9kYWxJbnN0YW5jZS5jbG9zZSgkc2NvcGUucmVzb3VyY2UpO1xyXG4gICAgICAgICAgICB9LCBmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICAgICAgICAgICRzY29wZS5lcnJvclJlc3BvbnNlID0gcmVzLmRhdGEuZXJyb3IubWVzc2FnZTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCIyXCIpO1xyXG4gICAgICAgICAgICBSZXNvdXJjZXNBcGkuc2F2ZSggJHNjb3BlLnJlc291cmNlLCBmdW5jdGlvbihyZXMpIHtcclxuICAgICAgICAgICAgICAgICRtb2RhbEluc3RhbmNlLmNsb3NlKCRzY29wZS5yZXNvdXJjZSk7XHJcbiAgICAgICAgICAgIH0sIGZ1bmN0aW9uKHJlcykge1xyXG4gICAgICAgICAgICAgICAgJHNjb3BlLmVycm9yUmVzcG9uc2UgPSByZXMuZGF0YS5lcnJvci5tZXNzYWdlO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcblxyXG4gICAgfTtcclxuXHJcbiAgICAkc2NvcGUuY2FuY2VsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICRtb2RhbEluc3RhbmNlLmRpc21pc3MoJ2NhbmNlbCcpO1xyXG4gICAgfTtcclxufSk7IiwiYXBwLmNvbnRyb2xsZXIoJ05hdmJhckluc3RhbmNlQ3RybCcsIGZ1bmN0aW9uICgkc2NvcGUpIHtcclxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9