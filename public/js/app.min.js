var app = angular.module('mcUAP', [
    'ngResource',
    'ui.bootstrap',
    'ui.router.tabs',
    'ui.router',
    'cgBusy'
    ])


    .config(["$interpolateProvider", function ($interpolateProvider) {
        $interpolateProvider.startSymbol('[[');
        $interpolateProvider.endSymbol(']]');
    }])
    .value('cgBusyDefaults',{
        message:'Loading Data',
        backdrop: false,
        templateUrl: '/partials/common/angular-busy.html',
        delay: 0,
        minDuration: 100,
        wrapperClass: 'my-class my-class2'
    });
app.factory('ServersApi', ["$resource", function($resource){
    return $resource('/api/v1/server/:id', {id:'@id'},
        {
            'update': { method:'PUT' }
        });
    }]);
app.factory('UserApi', ["$resource", function($resource){
    return $resource('/api/v1/user/:id', {id:'@id'},
        {
            'updateProfile': { method:'PUT' },
            'updatePassword': { method:'PUT' },
            'updateMinecraft': { method:'PUT' },
            'me': {
                method:'GET',
                url: "/api/v1/user/me"
            },
            'meUpdateProfile': {
                method:'PUT',
                url: "/api/v1/user/me/profile"
            },
            'meUpdatePassword': {
                method:'PUT',
                url: "/api/v1/user/me/password"
            },
            'meUpdateMinecraft': {
                method:'PUT',
                url: "/api/v1/user/me/minecraft"
            }
        });
    }]);
app.controller('ModalInstanceCtrl', ["$scope", "$modalInstance", "ResourcesApi", "recordID", function ($scope, $modalInstance, ResourcesApi, recordID) {

    if (recordID) {
        $scope.myPromise =  ResourcesApi.get({id:recordID}, function(data) {
            $scope.resource = data.data;
            $scope.showModalContent = true;
        });
    }
    else {
        $scope.showModalContent = true;
    }

    $scope.ok = function () {
        if(recordID){
            ResourcesApi.update({ id:$scope.resource.id }, $scope.resource, function(res) {
                $modalInstance.close($scope.resource);
            }, function(res) {
                $scope.errorResponse = res.data.error.message;
            });
        } else {
            console.log("2");
            ResourcesApi.save( $scope.resource, function(res) {
                $modalInstance.close($scope.resource);
            }, function(res) {
                $scope.errorResponse = res.data.error.message;
            });
        }

    };

    $scope.cancel = function () {
        $modalInstance.dismiss('cancel');
    };
}]);
app.controller("AdminCtrl", ["$scope", function($scope) {

    $scope.tabData   = [
        {
            heading: 'Servers',
            route:   'servers'
        },
        {
            heading: 'Subscriptions',
            route:   'subscriptions'
        },
        {
            heading: 'Users',
            route:   'users'
        },
        {
            heading: 'Roles',
            route:   'roles'
        }
    ];


}]).config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    //
    // For any unmatched url, redirect to /state1
    $urlRouterProvider.otherwise("/servers");
    //
    // Now set up the states
    $stateProvider.state('servers', {
        url: '/servers',
        templateUrl: '/partials/admin/servers.html'
    }).state('subscriptions', {
        url: '/subscriptions',
        templateUrl: '/partials/admin/subscriptions.html'
    }).state('users', {
        url: '/users',
        templateUrl: '/partials/admin/users.html'
    }).state('roles', {
        url: '/roles',
        templateUrl: '/partials/admin/roles.html'
    });

}]);
app.controller("ServerIndexCtrl", ["$scope", "$modal", "$filter", "ServersApi", function($scope, $modal, $filter, ServersApi) {


    var refreshData = function () {
        $scope.myPromise = ServersApi.get(function(data) {
            $scope.servers = data.data;
            $scope.showTableContent = true;
        });
    };
    refreshData();

    $scope.open = function (serverEditID) {
        var modalInstance = $modal.open({
            templateUrl: 'AddServerModal.html',
            controller: 'ModalInstanceCtrl',
            resolve: {
                ResourcesApi: function () {
                    return  ServersApi;
                },
                recordID: function () {
                    return  serverEditID;
                }
            }
        });

        modalInstance.result.then(function (data) {
            refreshData();
        }, function () {
        });
    };

}]);
app.controller("MinecraftIndexCtrl", ["$scope", "$modal", "$filter", "UserApi", function($scope, $modal, $filter, UserApi) {

    var refreshData = function () {
        $scope.myPromise = UserApi.me(function(data) {
            $scope.resource = data.data;
            $scope.showTableContent = true;
        });
    };
    refreshData();

    $scope.saveMinecraft = function () {
        UserApi.meUpdateMinecraft($scope.resource, function(res) {
            $scope.successMinecraftResponse = res;
            $scope.errorResponse = null;
        }, function(res) {
            $scope.errorResponse = res.data.error.message;
        });
    };


}]);
app.controller("ProfileCtrl", ["$scope", function($scope) {

    $scope.tabData   = [
        {
            heading: 'Profile',
            route:   'profile'
        },
        {
            heading: 'Minecraft',
            route:   'minecraft'
        }
    ];


}]).config(["$stateProvider", "$urlRouterProvider", function($stateProvider, $urlRouterProvider) {
    //
    // For any unmatched url, redirect to /state1
    $urlRouterProvider.otherwise("/profile");
    //
    // Now set up the states
    $stateProvider.state('profile', {
        url: '/profile',
        templateUrl: '/partials/profile/profile.html'
    }).state('minecraft', {
        url: '/minecraft',
        templateUrl: '/partials/profile/minecraft.html'
    });

}]);
app.controller("ProfileIndexCtrl", ["$scope", "$modal", "$filter", "UserApi", function($scope, $modal, $filter, UserApi) {

    var refreshData = function () {
        $scope.myPromise = UserApi.me(function(data) {
            $scope.resource = data.data;
            $scope.showTableContent = true;
        });
    };
    refreshData();

    $scope.saveProfile = function () {
        UserApi.meUpdateProfile($scope.resource, function(res) {
            $scope.successProfileResponse = res;
            $scope.errorResponse = null;
        }, function(res) {
            $scope.errorResponse = res.data.error.message;
        });
    };

    $scope.savePassword = function () {
        UserApi.meUpdatePassword($scope.resource, function(res) {
            $scope.successPasswordResponse = res;
            $scope.errorResponse = null;
        }, function(res) {
            $scope.errorResponse = res.data.error.message;
        });
    };


}]);
app.controller('NavbarInstanceCtrl', ["$scope", function ($scope) {
}]);
//# sourceMappingURL=data:application/json;base64,